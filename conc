package main

import (
	"fmt"
	"math/rand"
	"os"
	"sync"
	"time"
)

var wg sync.WaitGroup
var f, err = os.Create("data.txt")
var lock sync.Mutex
var ch = make(chan int)
var ch1 = make(chan int)
var counter1 = 0

func main() {
	for i := 0; i < 200; i++ {
		wg.Add(1)
		go generateNum()
		go handleNum()
	}
	go printResult()
	wg.Wait()
}

func generateNum() {
	rand.Seed(time.Now().UnixNano())
	num := rand.Intn(100)
	fmt.Println(num)
	ch <- num
}

func handleNum() {
	num := <-ch
	go divisedByTwo(num)
	wg.Done()
}

func divisedByTwo(num int) {
	if num%2 == 0 && counter1 < 50 {
		ch1 <- num
		lock.Lock()
		defer lock.Unlock()
		counter1++
	}
}

func printResult() {
	for i := range ch1 {
		f.WriteString(fmt.Sprintf("PRINTED BY DIV 2 %v\n", i))
	}
}
